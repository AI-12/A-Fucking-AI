package nl.tue.s2id90.contest;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.OK_CANCEL_OPTION;
import static javax.swing.JOptionPane.OK_OPTION;
import static javax.swing.JOptionPane.PLAIN_MESSAGE;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import nl.tue.s2id90.game.Player;

/**
 *
 * @author huub
 */
public class PluginSelectionPanel<P extends Player, Plugin extends PlayerProvider<P>>
       extends javax.swing.JPanel {
    /**
     * Creates new form PluginSelectionPanel
     */
    private PluginSelectionPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        groupCheckBox = new JCheckBox();
        jScrollPane2 = new JScrollPane();
        playerPanel = new JPanel();
        filler1 = new Box.Filler(new Dimension(5, 0), new Dimension(15, 0), new Dimension(5, 0));

        setLayout(new BorderLayout());

        groupCheckBox.setText("group name");
        groupCheckBox.setEnabled(false);
        add(groupCheckBox, BorderLayout.NORTH);

        jScrollPane2.setBorder(null);

        playerPanel.setLayout(new BoxLayout(playerPanel, BoxLayout.Y_AXIS));
        jScrollPane2.setViewportView(playerPanel);

        add(jScrollPane2, BorderLayout.CENTER);
        add(filler1, BorderLayout.WEST);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private Box.Filler filler1;
    private JCheckBox groupCheckBox;
    private JScrollPane jScrollPane2;
    private JPanel playerPanel;
    // End of variables declaration//GEN-END:variables

    /** fill the panel with a checkbox for each player, add a checkbox handler
     *  that adds or removes players from the enabledPlayers
     * list, and fill that list initially with all players.
     **/
    private void setPlugins(String pluginName, List<P> players, final List<P> enabledPlayers) {
        groupCheckBox.setText(pluginName);
        groupCheckBox.setSelected(true);
        for(final P p : players) {
            final JCheckBox checkBox = new JCheckBox(p.getName());
            checkBox.setSelected(true);
            checkBox.addActionListener((ActionEvent e) -> {
                if (checkBox.isSelected()) {
                    enabledPlayers.add(p);
                } else {
                    enabledPlayers.remove(p);
                }
            });
            playerPanel.add(checkBox);
            enabledPlayers.add(p);
        }
    }
    
    /**
     *
     * @param <P>
     * @param <Plugin>
     * @param component
     * @param plugins
     * @return list of selected players (null if cancel button is used)
     */
    public static <P extends Player,Plugin extends PlayerProvider<P>>
    List<P> showDialog(Component component, List<Plugin> plugins) {
        List<P> enabledPlayers = new ArrayList<>();
        
        // find the players in the plugins and register them per plugin name!
        Map<String,List<P>> map = new HashMap<>();
        for(Plugin plugin : plugins) {
            List<P> players = plugin.getPlayers();
            List<P> list = map.get(plugin.getName());
            if (list==null) {
                list = new ArrayList<>();
                map.put(plugin.getName(), list);
            }
            list.addAll(players);
        }
        
        // create GUI
        JPanel allPluginsPanel = new JPanel();
        allPluginsPanel.setLayout(new BoxLayout(allPluginsPanel, BoxLayout.Y_AXIS));
        
        for(String pluginName: map.keySet()) {
            PluginSelectionPanel panel = new PluginSelectionPanel();
            // fill panel with the corresponding players, and also fill enabled Players list
            panel.setPlugins(pluginName, map.get(pluginName), enabledPlayers); 
            allPluginsPanel.add(panel);
        }
        
        /** show dialog panel and wait for cancel or okay button to be pressed. **/
        int option = JOptionPane.showConfirmDialog(component, 
                allPluginsPanel, 
                "select players", 
                OK_CANCEL_OPTION, 
                PLAIN_MESSAGE);
        
        if (option == OK_OPTION) {
            return enabledPlayers; 
        } else {
            return null;
        }
    }
}